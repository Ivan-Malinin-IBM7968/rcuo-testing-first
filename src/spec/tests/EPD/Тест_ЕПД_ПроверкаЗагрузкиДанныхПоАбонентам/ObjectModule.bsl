Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем СериализаторMXL;
Перем УтвержденияПроверкаТаблиц;

#Область ИнтерфейсТестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	СериализаторMXL = КонтекстЯдра.Плагин("СериализаторMXL");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	ОписанияТестов = Новый Массив;
	// Пример заполнения ОписанияТестов, может быть либо просто Имя теста, либо параметризуемый тест
	//1. ОписанияТестов.Добавить("ТестДолжен_");
	//2. лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
	//	 ОписанияТестов.Добавить(лПараметры);
	
	ОписанияТестов.Добавить("ТестДолжен_ПроверитьЗагрузкуСоответствийУлиц");
	ОписанияТестов.Добавить("ТестДолжен_ПроверитьЗагрузкуСоответствийДомов");
	ОписанияТестов.Добавить("ТестДолжен_СложитьДваЧисла");
	
	ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов);

КонецПроцедуры

Процедура ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов)
	Для Каждого Описание Из ОписанияТестов Цикл
		Если ТипЗнч(Описание) = Тип("Строка") Тогда
			НаборТестов.Добавить(Описание);
		Иначе
			НаборТестов.Добавить(Описание.ИмяТеста, НаборТестов.ПараметрыТеста(Описание.Параметр), Описание.ПредставлениеТеста);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


#Область БлокUnitТестов

Процедура ТестДолжен_ПроверитьЗагрузкуСоответствийУлиц() Экспорт
	
	Макет = ПолучитьМакет("ТестДолжен_ПроверитьЗагрузкуСоответствийУлиц_Данные");
	ТестовыеДанные = СериализаторMXL.СоздатьДанныеПоТабличномуДокументу(Макет);
	
	Утверждения.ПроверитьТип(ТестовыеДанные, "Структура");
	Утверждения.ПроверитьРавенство(9, ТестовыеДанные.Количество());
	
	пКаталог = КонтекстЯдра.Настройки.рцПутьККаталогу;
	пПутьКФайлу = пКаталог + "\Data\DomZHKH.DBF";	
	ВыполнитьЗагрузкуСоответствий(пПутьКФайлу);
	
	пКаталог = КонтекстЯдра.Настройки.рцПутьККаталогу;
	пПутьКФайлу = пКаталог + "\Data\TRU_Dom.DBF";	
	ВыполнитьЗагрузкуСоответствий(пПутьКФайлу);
		
	РезультатОтчета = СформироватьИПолучитьРезультатОтчетаДляСравненияСЭталоном("ТестДолжен_ПроверитьЗагрузкуСоответствийУлиц_СКД");
	
	СравнитьРезультатВыполненияТестаСЭталоном("ТестДолжен_ПроверитьЗагрузкуСоответствийУлиц_Эталон", РезультатОтчета);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗагрузкуСоответствийДомов() Экспорт
	
	ВызватьИсключение "Данный метод еще не реализован";
	
КонецПроцедуры

Процедура ТестДолжен_СложитьДваЧисла() Экспорт
	Утверждения.ПроверитьРавенство(2+2, 4, "2+2=4");
КонецПроцедуры


#КонецОбласти

#Область ВспомогательныхПроцедур

Процедура ВыполнитьЗагрузкуСоответствий(пПутьКФайлу)

	ДвоичныеДанные = Новый ДвоичныеДанные(пПутьКФайлу);
	АдрХр = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	пТипДанных = Перечисления.ТипыДанных.ДанныеДомов;
	//пФорма = ПолучитьФорму("Обработка.ЗагрузкаСоответствий.Форма");
	пФорма = Обработки.ЗагрузкаСоответствий.ПолучитьФорму("Форма");
	пФорма.Объект.ОбновлятьСоответствияУлиц = Истина;
	пФорма.ВыполнитьЗагрузкуДанныхНаСервере(АдрХр, пПутьКФайлу, пТипДанных);

КонецПроцедуры

Функция СформироватьИПолучитьРезультатОтчетаДляСравненияСЭталоном(пИмяСКД)

	// Формирование отчета	
	РезультатОтчета = Новый ТабличныйДокумент;
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет(пИмяСКД);
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(РезультатОтчета);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат РезультатОтчета;

КонецФункции

Процедура СравнитьРезультатВыполненияТестаСЭталоном(пИмяЭталона, РезультатОтчета)
	
	// Получение эталонного отчета
	// Важно эталон получать именно так из-за плясок с кодом языка макета
	МакетЭталона = ПолучитьМакет(пИмяЭталона);
	Эталон = Новый ТабличныйДокумент;
	Эталон.Вывести(МакетЭталона);	
	
	#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение Тогда

		// Сохранение в файлы mxl
		ИмяФайлаЭталона = ПолучитьИмяВременногоФайла("mxl");
		ИмяФайлаРезультатаОтчета = ПолучитьИмяВременногоФайла("mxl");
		Эталон.Записать(ИмяФайлаЭталона);
		РезультатОтчета.Записать(ИмяФайлаРезультатаОтчета);
			
		// Сравнение файлов
		
		// Если Истина, то будет показано окно демонстрации различий, если файлы различны
		// Использовать только для расследования ошибки, если тест падает на сравнении
		ПоказатьРазличия = Истина;
		
		// ПараметрыСравнения заполняется по необходимости. Если не заполнены, то используются значения по умолчанию платформы
		// Если не указан способ сравнения, будет попытка определить автоматически по расширению файла:
		//  mxl - ТабличныйДокумент
		//  txt,xml - ТекстовыйДокумент
		ПараметрыСравнения = Новый Структура;
		//ПараметрыСравнения.Вставить("ИгнорироватьПустоеПространство", Истина);
		//ПараметрыСравнения.Вставить("УчитыватьРазделителиСтрок", Ложь);
		//ПараметрыСравнения.Вставить("УчитыватьРегистр", Ложь);
		//ПараметрыСравнения.Вставить("СпособСравнения", СпособСравненияФайлов.ТекстовыйДокумент);
		
		Утверждения.ПроверитьРавенствоФайлов(ИмяФайлаЭталона, ИмяФайлаРезультатаОтчета,
			"Ожидали, что результат отчета соответствует эталону", ПараметрыСравнения, ПоказатьРазличия);
	#Иначе
		УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(Эталон, РезультатОтчета, "Ожидали, что эталон (слева) совпадет с результатом (справа), а они различны!");
			
	#КонецЕсли	

КонецПроцедуры

#КонецОбласти

