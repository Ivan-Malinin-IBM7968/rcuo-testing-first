Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем СериализаторMXL;
Перем УтвержденияПроверкаТаблиц;
Перем КаталогЗапуска;
Перем РОДатаНачалаТекущегоРасчетногоПериода;
Перем СписокДокументов;
Перем текУчетныйМесяц;
Перем СписокАбонентов;
Перем ТабДокДвиженийДо;
Перем ТабДокДвиженийПосле;

#Область ИнтерфейсТестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	СериализаторMXL = КонтекстЯдра.Плагин("СериализаторMXL");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	//КаталогЗапуска = Лев(КонтекстЯдра.ИспользуемоеИмяФайла, СтрДлина(КонтекстЯдра.ИспользуемоеИмяФайла)-17);	
	//КаталогЗапуска = "\\10.10.0.11\public\СРПО\repo\Logs\";
	//КаталогЗапуска = КаталогВременныхФайлов();
	КаталогЗапуска = "\\10.10.0.11\1s\Logs\";
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	ОписанияТестов = Новый Массив;
	// Пример заполнения ОписанияТестов, может быть либо просто Имя теста, либо параметризуемый тест
	//1. ОписанияТестов.Добавить("ТестДолжен_");
	//2. лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
	//	 ОписанияТестов.Добавить(лПараметры);
	
	ОписанияТестов.Добавить("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Начисления");
	ОписанияТестов.Добавить("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_НачисленияОДН");
	ОписанияТестов.Добавить("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Перерасчеты");
	ОписанияТестов.Добавить("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПерерасчетыОДН");
	ОписанияТестов.Добавить("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПриНепредоставленииПоказаний");
	
	ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов);

КонецПроцедуры

Процедура ДобавитьОписанияТестовВНаборТестов(НаборТестов, ОписанияТестов)
	Для Каждого Описание Из ОписанияТестов Цикл
		Если ТипЗнч(Описание) = Тип("Строка") Тогда
			НаборТестов.Добавить(Описание);
		Иначе
			НаборТестов.Добавить(Описание.ИмяТеста, НаборТестов.ПараметрыТеста(Описание.Параметр), Описание.ПредставлениеТеста);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	ДатаУстановкиТекПериода = Дата(2016, 5, 1);
	Обработки.ркРегламентныеОперации.ВыполнитьСменуРасчетногоПериода(ДатаУстановкиТекПериода);
	текУчетныйМесяц = ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода();	
	//текУчетныйМесяц = Дата(2016, 5, 1);	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


#Область БлокUnitТестов

Процедура ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Начисления() Экспорт
	
	//Утверждения.ПроверитьРавенство(2*2, 5, "Тест 1");
	СписокАбонентов = ПолучитьСписокАбонентов("Начисления");
	СписокДокументов = ПолучитьСписокДокументов_Начисления();
	ТабДокДвиженийДо = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Начисления_СКД", "Начисления_До.XLSX");
	ОтменитьДвиженияДокументовПоСписку();
	ПерепровестиВсеДокументыПоСпискуДокументов_Начисления();
	ТабДокДвиженийПосле = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Начисления_СКД", "Начисления_После.XLSX");
	СравнитьТабличныеДокументыДвижений("Начисления");
	
КонецПроцедуры

Процедура ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_НачисленияОДН() Экспорт
		
	СписокАбонентов = ПолучитьСписокАбонентов("Начисления ОДН");
	СписокДокументов = ПолучитьСписокДокументов_НачисленияОДН();
	ТабДокДвиженийДо = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_НачисленияОДН_СКД", "НачисленияОДН_До.XLSX");
	ОтменитьДвиженияДокументовПоСписку();
	ПерепровестиВсеДокументыПоСпискуДокументов_НачисленияОДН();
	ТабДокДвиженийПосле = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_НачисленияОДН_СКД", "НачисленияОДН_После.XLSX");
	СравнитьТабличныеДокументыДвижений("Начисления ОДН");
	
КонецПроцедуры

Процедура ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Перерасчеты() Экспорт
		
	СписокАбонентов = ПолучитьСписокАбонентов("Перерасчеты");
	СписокДокументов = ПолучитьСписокДокументов_Перерасчеты();	
	ТабДокДвиженийДо = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Перерасчеты", "Перерасчеты_До.XLSX");
	ОтменитьДвиженияДокументовПоСписку();
	ПерепровестиВсеДокументыПоСпискуДокументов_Перерасчеты();
	ТабДокДвиженийПосле = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_Перерасчеты", "Перерасчеты_После.XLSX");
	СравнитьТабличныеДокументыДвижений("Перерасчеты");
	
КонецПроцедуры

Процедура ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПерерасчетыОДН() Экспорт
		
	СписокАбонентов = ПолучитьСписокАбонентов("Перерасчеты ОДН");
	СписокДокументов = ПолучитьСписокДокументов_ПерерасчетыОДН();		
	ТабДокДвиженийДо = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПерерасчетыОДН", "ПерерасчетыОДН_До.XLSX");
	ОтменитьДвиженияДокументовПоСписку();
	ПерепровестиВсеДокументыПоСпискуДокументов_ПерерасчетыОДН();
	ТабДокДвиженийПосле = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПерерасчетыОДН", "ПерерасчетыОДН_После.XLSX");
	СравнитьТабличныеДокументыДвижений("Перерасчеты ОДН");
	
КонецПроцедуры

Процедура ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПриНепредоставленииПоказаний() Экспорт
		
	СписокАбонентов = ПолучитьСписокАбонентов("При непредоставлении показаний");
	СписокДокументов = ПолучитьСписокДокументов_ПриНепредоставленииПоказаний();	
	ТабДокДвиженийДо = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПриНепредоставленииПоказаний", "ПриНепредоставленииПоказаний_До.XLSX");
	ОтменитьДвиженияДокументовПоСписку();
	ПерепровестиВсеДокументыПоСпискуДокументов_ПриНепредоставленииПоказаний();
	ТабДокДвиженийПосле = ПолучитьТабДокументДвижений("ТестДолжен_ПерепровестиИСравнитьДвиженияДокументов_ПриНепредоставленииПоказаний", "ПриНепредоставленииПоказаний_После.XLSX");
	СравнитьТабличныеДокументыДвижений("Начисления при непредоставлении показаний счетчиков");
	
КонецПроцедуры

#КонецОбласти

#Область ДокументовНачислений

Функция ПолучитьСписокДокументов_Начисления()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("текУчетныйМесяц", текУчетныйМесяц);
	Запрос.УстановитьПараметр("СписокЛС", СписокАбонентов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркНачисленияСоставНачислений.Ссылка КАК пДокумент
		|ИЗ
		|	Документ.ркНачисления.СоставНачислений КАК ркНачисленияСоставНачислений
		|ГДЕ
		|	ркНачисленияСоставНачислений.Ссылка.Проведен
		|	И ркНачисленияСоставНачислений.ЛицевойСчет В(&СписокЛС)
		|	И НЕ ркНачисленияСоставНачислений.Ссылка.НаОбщедомовыеНужды
		|	И ркНачисленияСоставНачислений.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ркНачисленияСоставНачислений.Ссылка.ОтложенныйРасчет";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пДокумент");
	
КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов_Начисления()

	Для каждого ТекДок Из СписокДокументов Цикл
	
		ДокОб = ТекДок.ПолучитьОбъект();
		Если 1=2 Тогда ДокОб = Документы.ркНачисления.СоздатьДокумент(); КонецЕсли;		
		
		МассивВРДокумента = ДокОб.СоставНачислений.ВыгрузитьКолонку("ВидРасчета");
		ДанныеПоЕжемесячнымНачислениям = ркДвиженияДокументовСервер.РассчитатьЕжемесячныеНачисления(Истина, Истина, НачалоМесяца(ДокОб.ДатаРасчетногоПериода), КонецМесяца(ДокОб.ДатаРасчетногоПериода), ДокОб.ЛицевойСчетДляРасчета, МассивВРДокумента);
		ДокОб.СоставНачислений.Загрузить(ДанныеПоЕжемесячнымНачислениям.Начисления);
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДокументовНачисленийОДН

Функция ПолучитьСписокДокументов_НачисленияОДН()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("текУчетныйМесяц", текУчетныйМесяц);
	Запрос.УстановитьПараметр("СписокЛС", СписокАбонентов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркНачисленияСоставНачислений.Ссылка КАК пДокумент
		|ИЗ
		|	Документ.ркНачисления.СоставНачислений КАК ркНачисленияСоставНачислений
		|ГДЕ
		|	ркНачисленияСоставНачислений.Ссылка.Проведен
		|	И ркНачисленияСоставНачислений.ЛицевойСчет В(&СписокЛС)
		|	И ркНачисленияСоставНачислений.Ссылка.НаОбщедомовыеНужды
		|	И ркНачисленияСоставНачислений.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пДокумент");

КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов_НачисленияОДН()

	Для каждого ТекДок Из СписокДокументов Цикл
	
		ДокОб = ТекДок.ПолучитьОбъект();		
		
		ДокОб.ДатаРасчетногоПериода = текУчетныйМесяц;
		ДокОб.Дата = текУчетныйМесяц;
		
		ДанныеПоЕжемесячнымНачислениям = Документы.ркНачисления.РаспределитьПоказанияОДПУ(ДокОб.ДатаРасчетногоПериода, ДокОб.ДомДляРасчета, ДокОб.ВидРасчета);
		ДокОб.СоставНачислений.Загрузить(ДанныеПоЕжемесячнымНачислениям.Начисления);
		ДокОб.Комментарий = ДанныеПоЕжемесячнымНачислениям.Комментарий;
		
		
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДокументовПерерасчеты

Функция ПолучитьСписокДокументов_Перерасчеты()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("текУчетныйМесяц", текУчетныйМесяц);
	Запрос.УстановитьПараметр("СписокЛС", СписокАбонентов);	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркПерерасчетСостав.Ссылка КАК пДокумент
		|ИЗ
		|	Документ.ркПерерасчет.Состав КАК ркПерерасчетСостав
		|ГДЕ
		|	ркПерерасчетСостав.Ссылка.Проведен
		|	И ркПерерасчетСостав.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ)
		|	И НЕ ркПерерасчетСостав.Ссылка.НаОбщедомовыеНужды
		|	И ркПерерасчетСостав.ЛицевойСчет В(&СписокЛС)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пДокумент");

КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов_Перерасчеты()

	Для каждого ТекДок Из СписокДокументов Цикл
	
		ДокОб = ТекДок.ПолучитьОбъект();		
		
		ТаблицаСПерерасчетами=ркПерерасчетыСервер.ПолучитьТаблицыПерерасчета(ДокОб.Состав,,ДокОб.УК, ДокОб.Дата);
		
		ДокОб.Начисления.Загрузить(ТаблицаСПерерасчетами.Начисления);
		ДокОб.Льготы.Загрузить(ТаблицаСПерерасчетами.Льготы);
		ДокОб.Субсидии.Загрузить(ТаблицаСПерерасчетами.Субсидии);
		
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДокументовПерерасчетыОДН

Функция ПолучитьСписокДокументов_ПерерасчетыОДН()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("текУчетныйМесяц", текУчетныйМесяц);
	Запрос.УстановитьПараметр("СписокЛС", СписокАбонентов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркЛицевыеСчета.Дом
		|ПОМЕСТИТЬ втДома
		|ИЗ
		|	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|ГДЕ
		|	ркЛицевыеСчета.Ссылка В (&СписокЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркПерерасчет.Ссылка КАК пДокумент
		|ИЗ
		|	Документ.ркПерерасчет КАК ркПерерасчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДома КАК втДома
		|		ПО ркПерерасчет.ДомДляРасчета = втДома.Дом
		|ГДЕ
		|	ркПерерасчет.Проведен
		|	И ркПерерасчет.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ)
		|	И ркПерерасчет.НаОбщедомовыеНужды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пДокумент");

КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов_ПерерасчетыОДН()

	Для каждого ТекДок Из СписокДокументов Цикл
	
		ДокОб = ТекДок.ПолучитьОбъект();		
		
		ДокОб.Дата = текУчетныйМесяц;
		
		ТаблицаСПерерасчетами=ркПерерасчетыСервер.ПолучитьТаблицыПерерасчетаОДН(ДокОб.МесяцПерерасчетОДН, ДокОб.ДомДляРасчета, ДокОб.ВидРасчетаОДН);
		
		ДокОб.Начисления.Загрузить(ТаблицаСПерерасчетами.Начисления);
		ДокОб.Комментарий = ТаблицаСПерерасчетами.Комментарий;
		
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ДокументовПриНепредоставленииПоказаний

Функция ПолучитьСписокДокументов_ПриНепредоставленииПоказаний()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("текУчетныйМесяц", текУчетныйМесяц);
	Запрос.УстановитьПараметр("СписокЛС", СписокАбонентов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркПерерасчет.Ссылка КАК пДокумент
		|ИЗ
		|	Документ.ркНачисленияПриНепредоставленииПоказанийСчетчиков.Состав КАК ркПерерасчет
		|ГДЕ
		|	ркПерерасчет.Ссылка.Проведен
		|	И ркПерерасчет.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(&текУчетныйМесяц, МЕСЯЦ)
		|	И ркПерерасчет.ЛицевойСчет В(&СписокЛС)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пДокумент");

КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов_ПриНепредоставленииПоказаний()

	Для каждого ТекДок Из СписокДокументов Цикл
	
		ДокОб = ТекДок.ПолучитьОбъект();		
		
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныхПроцедур

Функция ПолучитьСписокАбонентов(пВидТеста)

	СписокДомов = Новый СписокЗначений;
	// Список домов для проверки Начислений
	Если пВидТеста = "Начисления" Тогда 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000316"));//9 расхождений, около 700 лсч
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000288"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000318"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000010"));//расхождений на 20 стр 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000009"));//разное кол-во строк
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000311"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000310"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000313"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000020"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000022"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000320"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000003"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000304"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000012"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000016"));
	// + Список домов для проверки Начислений ОДН
	ИначеЕсли пВидТеста = "Начисления ОДН" Тогда 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000022"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000019"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000006"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000020"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000021"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000008"));
	// + Список домов для проверки Перерасчетов
	ИначеЕсли пВидТеста = "Перерасчеты" Тогда 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000320"));//пустые начисления
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000299"));//ошибка округления
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000022"));//ошибка округления
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000279"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000010"));//ошибка округления
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000009"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000298"));
	// + Список домов для проверки Перерасчетов ОДН за 01.03.2016
	ИначеЕсли пВидТеста = "Перерасчеты ОДН" Тогда 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000009"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000318"));
	// + Список домов для проверки начислений При непредоставлении показаний
	ИначеЕсли пВидТеста = "При непредоставлении показаний" Тогда 
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000316"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000318"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000283"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000003"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000018"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000002"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000009"));
		СписокДомов.Добавить(Справочники.ркДома.НайтиПоКоду("000000010"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дома", СписокДомов);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ркЛицевыеСчета.Ссылка КАК пАбонент
		|ИЗ
		|	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|ГДЕ
		|	ркЛицевыеСчета.Дом В(&Дома)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Возврат ТЗ.ВыгрузитьКолонку("пАбонент");	

КонецФункции // ПолучитьСписокАбонентов()

Функция ПолучитьТабДокументДвижений(пИмяСКД, пИмяФайла)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если СписокДокументов.Количество() <> 0 Тогда 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("пРегистраторы", СписокДокументов);
		
		ТабДок = СформироватьИПолучитьРезультатОтчетаДляСравненияСЭталоном(пИмяСКД, СтруктураПараметров);
		ПолноеИмяФайла = КаталогЗапуска + пИмяФайла;
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	КонецЕсли;
	
	Возврат ТабДок;

КонецФункции

Процедура ПерепровестиВсеДокументыПоСпискуДокументов()

	

КонецПроцедуры

Процедура СравнитьТабличныеДокументыДвижений(пИмяДокументов)

	СообщениеОбОшибке = "В результате проверки документов «" + пИмяДокументов + 
						"» найдены расхождения. Подробнее о сформированных результатах 
						|смотрите в каталоге «" + КаталогЗапуска + "»."; // + "\Logs\"
	#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Сохранение в файлы mxl
		ИмяФайлаДвиженийДо = ПолучитьИмяВременногоФайла("mxl");
		ИмяФайлаДвиженийПосле = ПолучитьИмяВременногоФайла("mxl");
		ТабДокДвиженийДо.Записать(ИмяФайлаДвиженийДо);
		ТабДокДвиженийПосле.Записать(ИмяФайлаДвиженийПосле);
		
		// Сравнение файлов
		
		// Если Истина, то будет показано окно демонстрации различий, если файлы различны
		// Использовать только для расследования ошибки, если тест падает на сравнении
		ПоказатьРазличия = Истина;
		
		// ПараметрыСравнения заполняется по необходимости. Если не заполнены, то используются значения по умолчанию платформы
		// Если не указан способ сравнения, будет попытка определить автоматически по расширению файла:
		//  mxl - ТабличныйДокумент
		//  txt,xml - ТекстовыйДокумент
		ПараметрыСравнения = Новый Структура;
		//ПараметрыСравнения.Вставить("ИгнорироватьПустоеПространство", Истина);
		//ПараметрыСравнения.Вставить("УчитыватьРазделителиСтрок", Ложь);
		//ПараметрыСравнения.Вставить("УчитыватьРегистр", Ложь);
		//ПараметрыСравнения.Вставить("СпособСравнения", СпособСравненияФайлов.ТекстовыйДокумент);
		
		Утверждения.ПроверитьРавенствоФайлов(ИмяФайлаДвиженийДо, ИмяФайлаДвиженийПосле,
		СообщениеОбОшибке, ПараметрыСравнения, ПоказатьРазличия);
	#Иначе
		УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДокДвиженийДо, ТабДокДвиженийПосле, СообщениеОбОшибке);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СохранитьНастройкиИБ()

	РОДатаНачалаТекущегоРасчетногоПериода=ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода();	

КонецПроцедуры

Процедура ВосстановитьНастройкиИБ()

	Обработки.ркРегламентныеОперации.ВыполнитьСменуРасчетногоПериода(РОДатаНачалаТекущегоРасчетногоПериода);

КонецПроцедуры

Функция СформироватьИПолучитьРезультатОтчетаДляСравненияСЭталоном(пИмяСКД, СтруктураПараметров)

	// Формирование отчета	
	РезультатОтчета = Новый ТабличныйДокумент;
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет(пИмяСКД);
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Устанавливаем значения параметров
	Для каждого Параметр из СтруктураПараметров Цикл
		ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Ключ);
		Если ПараметрСКД<>Неопределено Тогда 
			ПараметрСКД.Значение = Параметр.Значение;
		КонецЕсли;
	КонецЦикла;	
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(РезультатОтчета);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат РезультатОтчета;

КонецФункции

Процедура СравнитьРезультатВыполненияТестаСЭталоном(пИмяЭталона, РезультатОтчета)
	
	// Получение эталонного отчета
	// Важно эталон получать именно так из-за плясок с кодом языка макета
	МакетЭталона = ПолучитьМакет(пИмяЭталона);
	Эталон = Новый ТабличныйДокумент;
	Эталон.Вывести(МакетЭталона);	
	
	#Если ТолстыйКлиентОбычноеПриложение или ТолстыйКлиентУправляемоеПриложение Тогда

		// Сохранение в файлы mxl
		ИмяФайлаЭталона = ПолучитьИмяВременногоФайла("mxl");
		ИмяФайлаРезультатаОтчета = ПолучитьИмяВременногоФайла("mxl");
		Эталон.Записать(ИмяФайлаЭталона);
		РезультатОтчета.Записать(ИмяФайлаРезультатаОтчета);
			
		// Сравнение файлов
		
		// Если Истина, то будет показано окно демонстрации различий, если файлы различны
		// Использовать только для расследования ошибки, если тест падает на сравнении
		ПоказатьРазличия = Истина;
		
		// ПараметрыСравнения заполняется по необходимости. Если не заполнены, то используются значения по умолчанию платформы
		// Если не указан способ сравнения, будет попытка определить автоматически по расширению файла:
		//  mxl - ТабличныйДокумент
		//  txt,xml - ТекстовыйДокумент
		ПараметрыСравнения = Новый Структура;
		//ПараметрыСравнения.Вставить("ИгнорироватьПустоеПространство", Истина);
		//ПараметрыСравнения.Вставить("УчитыватьРазделителиСтрок", Ложь);
		//ПараметрыСравнения.Вставить("УчитыватьРегистр", Ложь);
		//ПараметрыСравнения.Вставить("СпособСравнения", СпособСравненияФайлов.ТекстовыйДокумент);
		
		Утверждения.ПроверитьРавенствоФайлов(ИмяФайлаЭталона, ИмяФайлаРезультатаОтчета,
			"Ожидали, что результат отчета соответствует эталону", ПараметрыСравнения, ПоказатьРазличия);
	#Иначе
		УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(Эталон, РезультатОтчета, "Ожидали, что эталон (слева) совпадет с результатом (справа), а они различны!");
			
	#КонецЕсли	

КонецПроцедуры

Процедура ОтменитьДвиженияДокументовПоСписку()

	Для каждого ТекДок Из СписокДокументов Цикл	
		ДокОб = ТекДок.ПолучитьОбъект();
		ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;	

КонецПроцедуры


#КонецОбласти

